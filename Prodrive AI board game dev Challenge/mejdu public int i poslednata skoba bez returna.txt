
            // check source and destination cell
            // of the matrix have value 1
            if (!array2D[src.x][src.y] || !array2D[dest.x][dest.y])
                return -1;

            bool visited[ROW][COL];
	        memset(visited, false, sizeof visited);

        // Mark the source cell as visited
        visited[src.x][src.y] = true;

	        // Create a queue for BFS
	        queue<QueueNode> q;

        // Distance of source cell is 0
        QueueNode s = { src, 0 };
        q.push(s);  // Enqueue source cell

	        // Do a BFS starting from source cell
	        while (!q.empty())
	        {
		QueueNode curr = q.front();
        Point pt = curr.pt;

		// If we have reached the destination cell,
		// we are done
		if (pt.x == dest.x && pt.y == dest.y)
			return curr.dist;

		// Otherwise dequeue the front cell in the queue
		// and enqueue its adjacent cells
		q.pop();

		for (int i = 0; i< 4; i++)
		{
			int row = pt.x + rowNum[i];
        int col = pt.y + colNum[i];

			// if adjacent cell is valid, has path and
			// not visited yet, enqueue it.
			if (isValid(row, col) && array2D[row][col] &&
				!visited[row][col])
			{
				// mark cell as visited and enqueue it
				visited[row][col] = true;
				QueueNode Adjcell = { {row, col},
                                      curr.dist + 1 };
        q.push(Adjcell);
			}
}