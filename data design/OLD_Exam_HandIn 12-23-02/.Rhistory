# Filter for the year 2002
# mutate the life expextency to represent months instead of years
# and arrange the gapminder dataset with life expectancy in months from high to low
gapminder %>%
filter(year == "2002") %>%
mutate(lifeExpMonths = 12 * lifeExp ) %>%
arrange( desc(lifeExpMonths) )
gapminder %>% filter(country == "China", gdpPercap == "3119")
gapminder %>% filter(country == "China", gdpPercap == "3119.")
gapminder %>% filter(country == "China", continent == "Asia")
gapminder %>% filter(country == "China", year == "2002")
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter() +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 2, width = 2) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 3, width = 3) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 10, width = 10) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter() +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 1, width = 1) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 2, width = 2) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 1, width = 2) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 13, width = 2) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 1, width = 3) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 1, width = 1) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 1, width = 2) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 1, width = 1.5) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 1, width = 0.5) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 1.3, width = 0.5) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 0.8, width = 0.5) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height = 1, width = 0.5) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter() +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height =2, width =2) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height =3, width =3) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_jitter(height =2, width =2) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter( year == "1952" )
ggplot(gapminder_1952, aes(x = pop, y = lifeExp , colour = continent , size = gdpPercap )) +
geom_jitter() +
scale_x_log10() +
ggtitle( '5 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter( year == "1952" )
ggplot(gapminder_1952, aes(x = pop, y = lifeExp , colour = continent , size = gdpPercap )) +
geom_point() +
scale_x_log10() +
ggtitle( '5 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_point() +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_point(size = 3) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp , colour= continent )) +
geom_point(size = 2) +
scale_x_log10() +
ggtitle( '4 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter( year == "1952" )
ggplot(gapminder_1952, aes(x = pop, y = lifeExp , colour = continent , size = gdpPercap )) +
geom_point(size = 2) +
scale_x_log10() +
ggtitle( '5 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter( year == "1952" )
ggplot(gapminder_1952, aes(x = pop, y = lifeExp , colour = continent , size = gdpPercap )) +
geom_point() +
scale_x_log10() +
ggtitle( '5 comparing life exp. against population 1952')
gapminder_1952 <- gapminder %>%
filter(year == "1952")
ggplot(gapminder_1952, aes(x= pop , y= lifeExp )) +
geom_point() +
scale_x_log10() +
facet_wrap(~ continent ) +
ggtitle(  '6 comparing life exp. against population in different continents')
ggplot(gapminder, aes(x= gdpPercap , y= lifeExp , colour= continent , size= pop )) +
geom_point() +
scale_x_log10() +
facet_wrap(~  year ) +
ggtitle( '7 Comparing GDP per capita against Life expectency over different years')
str(diamonds)
head(diamonds)
# - Make a scatter plot of the carat on the x axis and the price on the y axis.
ggplot( x = carat , y = price ) + geom_point()
# - Make a scatter plot of the carat on the x axis and the price on the y axis.
ggplot(Diamonds, aes(x = carat , y = price )) + geom_point()
# - Make a scatter plot of the carat on the x axis and the price on the y axis.
ggplot(diamonds, aes(x = carat , y = price )) + geom_point()
# - Copy the above command but show only the smooth line
ggplot(diamonds, aes(x = carat , y = price )) + geom_point() + geom_smooth()
# - Copy the above command but show only the smooth line
ggplot(diamonds, aes(x = carat , y = price )) + geom_point() + geom_smooth()
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price )) + geom_point() + geom_smooth(color = cuts)
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price )) + geom_point() + geom_smooth(color = carats)
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price )) + geom_point() + geom_smooth(color = carat)
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price )) + geom_point() + geom_smooth(color = carat)
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, color = carat )) + geom_point() + geom_smooth()
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, color = carat )) + geom_point() + geom_smooth(method = lm)
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, color = carat )) + geom_point() + geom_smooth()
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, color = carat )) + geom_point() + geom_smooth(color = carat)
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, color = carat )) + geom_point() + geom_smooth(group(carat))
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, color = carat )) + geom_point() + geom_smooth(group_by(carat))
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price)) + geom_point() + geom_smooth(group_by(carat))
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price)) + geom_point() + geom_smooth(color(carat))
diamonds
?geom_smooth()
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price)) + geom_point() + geom_smooth(colour = carat)
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price) colour = carat) + geom_point() + geom_smooth()
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, colour = carat) + geom_point() + geom_smooth()
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, colour = carat)) + geom_point() + geom_smooth()
diamonds
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, colour = carat)) + geom_point() + geom_smooth(colour = cut)
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, colour = cut)) + geom_point() + geom_smooth()
# First we need to select the reduced data set of diamonds with a weight of only 2 carats.
diamond_short <- diamonds %>%
filter( carat < 2.0 )
ggplot( diamond_short , aes(x = carat, y = price, colour = cut)) +
geom_point() + geom_smooth()
bakeoff <- read_csv("bakeoff.csv", skip = 0,
na = c("", "NA", "UNKNOWN"))
#If we want to see the loaded data set, we can use the following two options:
#View(bakeoff)
#str(bakeoff)
view(bakeoff)
# Filter rows where showstopper is NA
bakeoff %>%
filter(is.na(showstopper))
bakeoff
# Filter rows where showstopper is NA
bakeoff %>%
filter(!is.na(showstopper))
bakeoff
# Filter rows where showstopper is NA
bakeoff %>%
filter(is.na(showstopper))
bakeoff
# Filter rows where showstopper is NA
bakeoff %>%
filter(!is.na(showstopper))
bakeoff
# Filter rows where showstopper is NA
bakeoff %>%
filter(!is.na(showstopper))
# Filter rows where showstopper is NA
bakeoff %>%
filter(is.na(showstopper))
# View distinct results
bakeoff %>%
distinct(results)
# View distinct results
bakeoff %>%
distinct(result)
# Count rows for each result
bakeoff %>%
count( result )
bakeoff %>%
count( series ,episodes )
bakeoff %>%
count( series ,episode )
bakeoff %>%
count( episode ,series )
bakeoff %>%
count( series ,episode )
bakeoff %>%
count( episode ,series ) %>% distinct(series)
bakeoff %>%
count( episode ,series ) %>% distinct(series, episode)
bakeoff %>%
distinct( episode , series ) %>% count( episode )
bakeoff %>%
distinct( episode , series ) %>% count( series )
bakeoff %>%
count( series ,episode ) %>% count( episode, series )
bakeoff %>%
count( series ,episode ) %>% count( episode)
ratings <- messy_ratings.csv(na = c("", "NA", "UNKNOWN"))
# Gather viewer columns and remove NA rows that are in the data set, you can use this code without alterations. Note that we are still interested in the number of viewers per episode.
tidy_ratings <- ratings %>%
gather(key = ___, value = ___, -series, na.rm = TRUE)
ratings <- read_csv(messy_ratings.csv(na = c("", "NA", "UNKNOWN")))
# Gather viewer columns and remove NA rows that are in the data set, you can use this code without alterations. Note that we are still interested in the number of viewers per episode.
tidy_ratings <- ratings %>%
gather(key = ___, value = ___, -series, na.rm = TRUE)
ratings <- read_csv("messy_ratings.csv"(na = c("", "NA", "UNKNOWN")))
# Gather viewer columns and remove NA rows that are in the data set, you can use this code without alterations. Note that we are still interested in the number of viewers per episode.
tidy_ratings <- ratings %>%
gather(key = ___, value = ___, -series, na.rm = TRUE)
ratings <- read_csv("messy_ratings.csv",na = c("", "NA", "UNKNOWN"))
# Gather viewer columns and remove NA rows that are in the data set, you can use this code without alterations. Note that we are still interested in the number of viewers per episode.
tidy_ratings <- ratings %>%
gather(key = ___, value = ___, -series, na.rm = TRUE)
ratings <- read_csv("messy_ratings.csv",na = c("", "NA", "UNKNOWN"))
# Gather viewer columns and remove NA rows that are in the data set, you can use this code without alterations. Note that we are still interested in the number of viewers per episode.
tidy_ratings <- ratings %>%
gather(key = viewers, value =episode, -series, na.rm = TRUE)
ratings <- read_csv("messy_ratings.csv",na = c("", "NA", "UNKNOWN"))
# Gather viewer columns and remove NA rows that are in the data set, you can use this code without alterations. Note that we are still interested in the number of viewers per episode.
tidy_ratings <- ratings %>%
gather(key = "viewers", value ="episode", -series, na.rm = TRUE)
# Adapt code to parse episode as a number
tidy_ratings <- ratings %>%
gather(  key = "episodes", value = "viewers"  , - series  , na.rm = TRUE) %>%
mutate(episode = parse_number(episode))
# Adapt code to parse episode as a number
tidy_ratings <- ratings %>%
gather(  key = "episode", value = "viewers"  , - series  , na.rm = TRUE) %>%
mutate(episode = parse_number(episode))
# Adapt code to parse episode as a number
tidy_ratings <- ratings %>%
gather(  key = "episode", value = "viewers"  , - series  , na.rm = TRUE) %>%
mutate(episode = parse_number(episode))
# - Copy the above command but show only the smooth line
ggplot(diamonds, aes(x = carat , y = price )) + geom_smooth()
# - Based on the previous graph, make the seperete lines for the different cuts.
ggplot(diamonds, aes(x = carat , y = price, colour = cut)) + geom_smooth()
# First we need to select the reduced data set of diamonds with a weight of only 2 carats.
diamond_short <- diamonds %>%
filter( carat < 2.0 )
ggplot( diamond_short , aes(x = carat, y = price, colour = cut)) + geom_smooth()
bakeoff %>%
count( series ,episode ) %>% count(series)
# Adapt code to parse episode as a number
tidy_ratings <- ratings %>%
gather(  key = "episode", value = "viewers"  , - series  , na.rm = TRUE) %>%
mutate(episode = parse_number(episode))
# Fill in blanks to get first/last data
tidy_ratings %>%
group_by(series) %>%
filter(episode == "1" | episode == max(episode)) %>%
ungroup()
# Adapt code to parse episode as a number
tidy_ratings <- ratings %>%
gather(  key = "episode", value = "viewers"  , - series  , na.rm = TRUE) %>%
mutate(episode = parse_number(episode))
# Recode first/last episodes
first_last <- tidy_ratings %>%
mutate(episode = recode(episode, `1` = "first", .default = "last"))
first_last
# Recode first/last episodes
first_last <- tidy_ratings %>% group_by(series) %>%
filter(episode == "1" | episode == max(episode)) %>%
ungroup() %>%
mutate(episode = recode(episode, `1` = "first", .default = "last"))
first_last
# Fill in to make slope chart
ggplot(first_last, aes(x = episode, y =viewers, color = series)) +
geom_point() +
geom_line(aes(group = season))
# Fill in to make slope chart
ggplot(first_last, aes(x = episode, y =viewers, color = series)) +
geom_point() +
geom_line(aes(group = seasons))
# Fill in to make slope chart
ggplot(first_last, aes(x = episode, y =viewers, color = series)) +
geom_point() +
geom_line(aes(group = series))
# Let's reset the object for the first_last.
first_last <- tidy_ratings %>%
mutate(episode = recode(episode, `1` = "first", .default = "last"))
# Let's reset the object for the first_last.
first_last <- tidy_ratings %>%
group_by(series) %>%
filter(episode == "1" | episode == max(episode)) %>%
ungroup() %>%
mutate(episode = recode(episode, `1` = "first", .default = "last"))
# Switch the variables mapping x-axis and color
ggplot(first_last, aes(x = viewers, y = episode, color = episode)) +
geom_point() +
geom_line(aes(group = series)) +
# Switch the variables mapping x-axis and color
ggplot(first_last, aes(x = viewers, y = episode, color = episode)) +
geom_point() +
geom_line(aes(group = series))
# Let's reset the object for the first_last.
first_last <- tidy_ratings %>%
mutate(episode = recode(episode, `1` = "first", .default = "last"))
# Switch the variables mapping x-axis and color
ggplot(first_last, aes(x = viewers, y = episode, color = episode)) +
geom_point() +
geom_line(aes(group = series)) +
____()
# Switch the variables mapping x-axis and color
ggplot(first_last, aes(x = viewers, y = episode, color = episode)) +
geom_point() +
geom_line(aes(group = series))
# Let's reset the object for the first_last.
first_last <- tidy_ratings %>%
group_by(series) %>%
filter(episode == "1" | episode == max(episode)) %>%
ungroup() %>%
mutate(episode = recode(episode, `1` = "first", .default = "last"))
# Switch the variables mapping x-axis and color
ggplot(first_last, aes(x = viewers, y = episode, color = episode)) +
geom_point() +
geom_line(aes(group = series))
# Switch the variables mapping x-axis and color
ggplot(first_last, aes(x = viewers, y = series, color = episode)) +
geom_point() +
geom_line(aes(group = series))
# Let's reset the object for the first_last.
first_last <- tidy_ratings %>%
group_by(series) %>%
filter(episode == "1" | episode == max(episode)) %>%
ungroup() %>%
mutate(episode = recode(episode, `1` = "first", .default = "last"))
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(series, episode) %>%
mutate(bump = (___ - ___) / ____)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(key = "series", value = "episode") %>%
mutate(bump = (___ - ___) / ____)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(series, episode) %>%
mutate(bump = (___ - ___) / ____)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(episode, viewers) %>%
mutate(bump = (___ - ___) / ____)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(first_last, episode, viewers) %>%
mutate(bump = (viewers - ___) / ____)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(tidy_ratings, episode, viewers) %>%
mutate(bump = (viewers - ___) / ____)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(series, episode, viewers) %>%
mutate(bump = (viewers - ___) / ____)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(episode, viewers) %>%
mutate(bump = (viewers - episode) /series)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(episode, episode, viewers) %>%
mutate(bump = (viewers - episode) /series)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(episode, series) %>%
mutate(bump = (viewers - episode) /series)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
# Calculate relative increase in viewers
bump_by_series <- first_last %>%
spread(episode, series) %>%
mutate(bump = (viewers - episode) /series)
ggplot(bump_by_series, aes(x = series, y = bump)) +
geom_col() +
scale_y_continuous(labels = scales::percent) # converts to %
source('~/.active-rstudio-document', echo=TRUE)
